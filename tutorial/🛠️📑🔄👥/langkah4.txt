public function edit($id)
{
    if (! auth()->user()->can('supplier.update') && ! auth()->user()->can('customer.update') && ! auth()->user()->can('customer.view_own') && ! auth()->user()->can('supplier.view_own')) {
        abort(403, 'Unauthorized action.');
    }

    if (request()->ajax()) {
        $business_id = request()->session()->get('user.business_id');
        $contact = Contact::where('business_id', $business_id)->with('userHavingAccess')->find($id);

        // Check if contact exists
        if (!$contact) {
            if (request()->has('modal')) {
                return response()->json([
                    'success' => false,
                    'msg' => 'Customer not found'
                ]);
            }
            abort(404, 'Contact not found');
        }

        if (! $this->moduleUtil->isSubscribed($business_id)) {
            return $this->moduleUtil->expiredResponse();
        }

        $types = [];
        if (auth()->user()->can('supplier.create')) {
            $types['supplier'] = __('report.supplier');
        }
        if (auth()->user()->can('customer.create')) {
            $types['customer'] = __('report.customer');
        }
        if (auth()->user()->can('supplier.create') && auth()->user()->can('customer.create')) {
            $types['both'] = __('lang_v1.both_supplier_customer');
        }

        $customer_groups = CustomerGroup::forDropdown($business_id);

        $ob_transaction = Transaction::where('contact_id', $id)
            ->where('type', 'opening_balance')
            ->first();
        $opening_balance = ! empty($ob_transaction->final_total) ? $ob_transaction->final_total : 0;

        //Deduct paid amount from opening balance.
        if (! empty($opening_balance)) {
            $opening_balance_paid = $this->transactionUtil->getTotalAmountPaid($ob_transaction->id);
            if (! empty($opening_balance_paid)) {
                $opening_balance = $opening_balance - $opening_balance_paid;
            }

            $opening_balance = $this->commonUtil->num_f($opening_balance);
        }

        //Added check because $users is of no use if enable_contact_assign if false
        $users = config('constants.enable_contact_assign') ? User::forDropdown($business_id, false, false, false, true) : [];

        // Check if this is a modal request
        if (request()->has('modal')) {
            try {
                $view = view('contact.edit_customer_modal', compact('contact', 'types', 'customer_groups', 'opening_balance', 'users'))->render();
                return response()->json([
                    'success' => true,
                    'html' => $view
                ]);
            } catch (\Exception $e) {
                \Log::error('Error loading edit customer modal: ' . $e->getMessage());
                return response()->json([
                    'success' => false,
                    'msg' => 'Error loading customer data: ' . $e->getMessage()
                ]);
            }
        }

        return view('contact.edit')
            ->with(compact('contact', 'types', 'customer_groups', 'opening_balance', 'users'));
    }
}